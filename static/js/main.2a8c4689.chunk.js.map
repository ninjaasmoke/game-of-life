{"version":3,"sources":["App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["App","useState","gridSize","cellSize","emptyGrid","gridN","grid","i","push","Array","from","setGrid","neighOps","simulating","setSimulating","simRef","useRef","current","startSimulation","useCallback","produce","gridCopy","k","neighbors","forEach","x","y","newI","newK","setTimeout","className","onClick","row","Math","random","id","style","gridTemplateColumns","gridTemplateRows","map","rows","cols","j","newGrid","width","height","border","src","alt","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2a8c4689.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport { produce } from 'immer';\n\n\nfunction App() {\n\n  const [gridSize, setGridSize] = useState(20);\n\n  const [cellSize, setCellSize] = useState(22);\n\n  const emptyGrid = (gridN: number = gridSize) => {\n    const grid = [];\n    for (let i = 0; i < gridN; i++) {\n      grid.push(\n        Array.from(Array(gridN), () => 0)\n      );\n    }\n    return grid;\n  }\n\n\n\n  const [grid, setGrid] = useState<number[][]>(() => emptyGrid());\n\n\n  const neighOps = [\n    [0, 1],\n    [0, -1],\n    [1, -1],\n    [-1, 1],\n    [1, 1],\n    [-1, -1],\n    [1, 0],\n    [-1, 0]\n  ];\n\n  const [simulating, setSimulating] = useState(false);\n\n  const simRef = useRef(simulating);\n  simRef.current = simulating;\n\n  const startSimulation = useCallback(() => {\n    if (!simRef.current) {\n      return;\n    }\n\n    setGrid((grid) => {\n      return produce(grid, (gridCopy: number[][]) => {\n        for (let i = 0; i < gridSize; i++) {\n          for (let k = 0; k < gridSize; k++) {\n            let neighbors = 0;\n            neighOps.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y;\n              if (newI >= 0 && newI < gridSize && newK >= 0 && newK < gridSize) {\n                neighbors += grid[newI][newK];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][k] = 0;\n            } else if (grid[i][k] === 0 && neighbors === 3) {\n              gridCopy[i][k] = 1;\n            }\n          }\n        }\n      });\n\n    });\n\n    setTimeout(startSimulation, 200);\n\n  }, [])\n\n  return (\n    <>\n      <div className=\"App\">\n\n        {/* control buttons */}\n\n        <div className=\"buttons\">\n          <button\n            onClick={() => {\n              setSimulating(!simulating);\n              if (!simulating) {\n                simRef.current = true;\n                startSimulation();\n              }\n            }}\n          >\n            {simulating ? \"Stop\" : \"Start\"} Sim\n          </button>\n          <button\n            onClick={() => {\n              const row = [];\n              for (let i = 0; i < gridSize; i++) {\n                row.push(\n                  Array.from(Array(gridSize), () => (Math.random() > 0.8 ? 1 : 0))\n                );\n              }\n\n              setGrid(row);\n            }}\n          >\n            Generate Random\n          </button>\n          <button\n            onClick={() => {\n              setGrid(emptyGrid(gridSize));\n            }}\n          >\n            Clear All\n          </button>\n        </div>\n\n        {/* Simulation grid */}\n\n        <div className=\"grid\"\n          id=\"grid\"\n          style={{\n            gridTemplateColumns: `repeat(${gridSize}, ${cellSize + 1}px)`,\n            gridTemplateRows: `repeat(${gridSize}, ${cellSize + 1}px)`,\n          }}\n        >\n          {\n            grid.map((rows, i) => rows.map((cols, j) => (\n              <div className=\"cell\"\n                key={`${i}-${j}`}\n                onClick={() => {\n                  const newGrid = produce(grid, gridCopy => {\n                    gridCopy[i][j] = grid[i][j] ? 0 : 1;\n                  });\n                  setGrid(newGrid);\n                }}\n                style={{\n                  width: cellSize,\n                  height: cellSize,\n                  // backgroundColor: grid[i][j] ? 'var(--accent)' : 'var(--bg)',\n                  border: grid[i][j] ? '6px solid var(--accent)' : '1px solid var(--bgSec)'\n                }}\n              ></div>\n            )))\n          }\n        </div>\n      </div>\n      <div className=\"smolscreen\">\n        <p>Smol screen</p>\n        <img src=\"https://icon2.cleanpng.com/20180401/zww/kisspng-shiba-inu-dogecoin-clip-art-doge-5ac19a4e7ef1f4.89995344152263739052.jpg\" alt=\"\" />\n        <span>Fake png :(</span>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}